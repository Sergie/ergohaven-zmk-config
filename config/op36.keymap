#include "keys_ru.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        kha {
            bindings = <&kp LBKT>;
            key-positions = <6 7>;
        };

        hrdsgn {
            bindings = <&kp RBKT>;
            key-positions = <7 8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
  &lt 7 Q      &kp W        &lt 6 F  &kp P          &kp B                                             &kp J            &kp L            &kp U         &kp Y        &kp FSLH
  &hml LGUI A  &hml LALT R  &lt 1 S  &hml LCTRL T   &kp G                                             &kp M            &hmr RCTRL N     &hmr RSHFT E  &hmr LALT I  &hmr RGUI O
  &kp Z        &kp X        &lt 3 C  &lt 2 D        &kp V                                             &kp K            &lt 2 H          &kp COMMA     &kp DOT      &kp SEMI
                                     &mt LSHFT ESC  &mt LEFT_CONTROL TAB  &kp SPACE    &kp BACKSPACE  &mt RCTRL SPACE  &mt RSHFT ENTER
            >;
        };

        nav {
            bindings = <
  &none     &none     &none  &kp PRINTSCREEN  &kp BACKSPACE                       &kp PAGE_UP      &kp HOME        &kp UP          &kp END          &kp BACKSPACE
  &kp LWIN  &kp LALT  &none  &kp LCTRL        &to 4                               &kp PAGE_DOWN    &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LA(TAB)
  &none     &none     &none  &kp DELETE       &kp INS                             &kp LS(LA(TAB))  &kp TAB         &kp SPACE       &kp ENTER        &kp DELETE
                             &trans           &trans         &kp ENTER    &trans  &trans           &trans
            >;
        };

        sym {
            bindings = <
  &kp GRAVE      &kp CARET  &kp EXCL        &kp DQT          &none                          &kp PLUS   &kp SINGLE_QUOTE  &kp UNDER  &kp QMARK  &kp BSLH
  &kp AMPERSAND  &kp EQUAL  &kp DOLLAR      &kp MINUS        &kp AT_SIGN                    &kp ASTRK  &kp LPAR          &kp RPAR   &none      &kp PIPE
  &kp TILDE      &kp HASH   &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp PRCNT                      &kp LBKT   &kp RBKT          &kp LT     &kp GT     &kp COLON
                                            &trans           &trans       &trans    &trans  &trans     &trans
            >;
        };

        NUM {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                    &kp PLUS   &kp N1  &kp N2  &kp N3  &kp MINUS
  &trans  &trans  &trans  &trans  &trans                    &kp N0     &kp N4  &kp N5  &kp N6  &kp N0
  &trans  &trans  &trans  &trans  &trans                    &kp COMMA  &kp N7  &kp N8  &kp N9  &kp DOT
                          &trans  &trans  &trans    &trans  &trans     &trans
            >;
        };

        GAM {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &to 0
            >;
        };

        MOUS {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
                          &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        FUNC {
            bindings = <
  &trans  &trans  &trans  &trans  &trans                    &kp F1   &kp F2   &kp F3           &kp F4           &kp F5
  &trans  &trans  &trans  &trans  &trans                    &kp F6   &kp F7   &kp F8           &kp F9           &kp F10
  &trans  &trans  &trans  &trans  &trans                    &kp F11  &kp F12  &kp PRINTSCREEN  &kp PAUSE_BREAK  &kp SCROLLLOCK
                          &trans  &trans  &trans    &trans  &trans   &trans
            >;
        };

        adj {
            bindings = <
  &bootloader  &kp F1        &kp F2         &kp F3         &kp F4                     &bt BT_SEL 0  &bt BT_SEL 1         &bt BT_SEL 2       &bt BT_SEL 3        &bt BT_CLR
  &kp LGUI     &hml LALT F5  &hml LSHFT F6  &hml LCTRL F7  &kp F8                     &out OUT_BLE  &hmr RCTRL C_VOL_DN  &hmr RSHFT C_MUTE  &hmr LALT C_VOL_UP  &kp RGUI
  &kp EXCL     &kp F9        &kp F10        &kp F11        &kp F12                    &out OUT_USB  &kp C_PREV           &kp C_PP           &kp C_NEXT          &studio_unlock
                                            &trans         &trans   &trans    &trans  &trans        &trans
            >;
        };
    };
};
